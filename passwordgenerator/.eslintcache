[{"/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/index.js":"1","/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/App.js":"2","/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/PasswordGenerator.js":"3"},{"size":222,"mtime":1607886676472,"results":"4","hashOfConfig":"5"},{"size":1500,"mtime":1607889598043,"results":"6","hashOfConfig":"5"},{"size":1561,"mtime":1607751889194,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"y00wct",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15","usedDeprecatedRules":"16"},"/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/index.js",[],["17","18"],"/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/App.js",[],"/Users/chrisurbano/Desktop/password-webapp/passwordgenerator/src/PasswordGenerator.js",["19","20"],"import { isUpdateExpression } from \"@babel/types\";\nimport { isSymbol } from \"util\";\n\nlet characters = '';\nlet passwordLength = 0;\n\n\nconst addUpperCase = isUpperCase => {\n    if (isUpperCase) {\n        characters += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    }\n    return '';\n}\n\nconst addLowerCase = isLowerCase => {\n    if (isLowerCase) {\n        characters += 'abcdefghijklmnopqrstuvwxyz';\n    }\n    return '';\n}\n\n\nconst addSymbols = isSymbolic => {\n    if (isSymbolic) {\n        characters += '~`!@#$%^&*()-_=+{[}]:;?.,/><';\n    }\n    return '';\n}\n\nconst addNumbers = isNumeric => {\n    if (isNumeric) {\n        characters += '123456789';\n    }\n    return '';\n}\n\nconst getRandomIntger = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst passwordCharacters = () => {\n    let password = '';\n    if(characters.length < 1){\n        return \"You will find what you are looking for\";\n    }\n    for(let i = 0; i <passwordLength; i++){\n        password += characters[getRandomIntger(0,characters.length - 1)];\n    }\n    characters = '';\n    passwordLength = 0;\n    return password;\n}\n\nexport const setPasswordLength = length => {\n    passwordLength = length;\n    return passwordLength;\n}\n\nexport const generatePassword = (passwordProps, passwordLength) => {\n    const {uppercase, lowercase, symbols, numbers } = passwordProps;\n    setPasswordLength(passwordLength);\n    addLowerCase(lowercase);\n    addUpperCase(uppercase);\n    addSymbols(symbols);\n    addNumbers(numbers);\n    const password = passwordCharacters;\n    return password;\n}\n\n\n",["21","22"],{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":1,"column":10,"nodeType":"29","messageId":"30","endLine":1,"endColumn":28},{"ruleId":"27","severity":1,"message":"31","line":2,"column":10,"nodeType":"29","messageId":"30","endLine":2,"endColumn":18},{"ruleId":"23","replacedBy":"32"},{"ruleId":"25","replacedBy":"33"},"no-native-reassign",["34"],"no-negated-in-lhs",["35"],"no-unused-vars","'isUpdateExpression' is defined but never used.","Identifier","unusedVar","'isSymbol' is defined but never used.",["34"],["35"],"no-global-assign","no-unsafe-negation"]